use manifest_builder_examples::*;
use scrypto::prelude::*;
use transaction::builder::*;

/// An example manifest that shows the various metadata operations such as set, remove, and lock.
fn main() {
    // An allocator that we will use to create new _example_ addresses for the purposes of this
    // example. Addresses generated by the allocator do not exist on any network.
    let mut allocator = Allocator::default();

    // The address of the resource that we will perform the metadata operations on.
    let resource_address = allocator.new_fungible_resource_address();

    // The address of the owner badge of the resource. This is required to allow us to update the
    // metadata on it.
    let admin_badge = allocator.new_fungible_resource_address();

    // The address of the account that holds the admin badge.
    let admin_badge_holder = allocator.new_account_address();

    // Constructing a manifest that establishes a two-way link between the resource and the dApp
    // definition.
    let manifest = ManifestBuilder::new()
        // Assuming that the account that holds the admin badge is also the fee payer, we lock fees
        // from that account. We're locking 10 XRD so that we have more than enough to do what we
        // need.
        .lock_fee(admin_badge_holder, 10)
        // Creating a proof of the owner badge, required for permission to update the metadata on
        // the resource.
        .create_proof_from_account_of_amount(admin_badge_holder, admin_badge, 1)
        // Example 1: Setting the metadata field. This is an upsert operation. This fails if the
        // field is locked.
        .set_metadata(resource_address, "some_field_name", "some_field_value")
        // Example 2: Removing the metadata from a field. This fails if the field is locked.
        .set_metadata(resource_address, "some_field_name", None)
        // Example 3: Locking a metadata field making it forever immutable.
        .lock_metadata(resource_address, "some_field_name")
        .build();

    // Validate the manifest and print it.
    validate_and_print(&manifest)
}
