use manifest_builder_examples::*;
use scrypto::prelude::*;
use transaction::builder::*;

/// An example manifest that creates a new fungible resource.
fn main() {
    // An allocator that we will use to create new _example_ addresses for the purposes of this
    // example. Addresses generated by the allocator do not exist on any network.
    let mut allocator = Allocator::default();

    // The address of the account to pay the fees from.
    let fee_payer_account = allocator.new_account_address();

    // Constructing a manifest that establishes a two-way link between the resource and the dApp
    // definition.
    let manifest = ManifestBuilder::new()
        // Locking fees from the fee payer's account.
        .lock_fee(fee_payer_account, 10)
        // Creating the resource.
        .create_fungible_resource(
            OwnerRole::None,
            true,
            18,
            // The roles that we wish to have on the resource. Let's say that we want the resource
            // to be freely mintable and burnable and for all of the other roles to be the default.
            FungibleResourceRoles {
                mint_roles: mint_roles! {
                    minter => rule!(allow_all);
                    minter_updater => rule!(deny_all);
                },
                burn_roles: burn_roles! {
                    burner => rule!(allow_all);
                    burner_updater => rule!(deny_all);
                },
                // Nice Rust concept for fill the remaining fields (roles) with the default.
                ..Default::default()
            },
            metadata! {
                init {
                    "name" => "Some Example Resource", locked;
                    "description" => "An example manifest that creates an example resource.", locked;
                }
            },
            None,
        )
        .build();

    // Validate the manifest and print it.
    validate_and_print(&manifest)
}
