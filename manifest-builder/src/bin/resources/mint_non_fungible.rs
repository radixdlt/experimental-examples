use manifest_builder_examples::*;
use scrypto::prelude::*;
use transaction::builder::*;

/// An example manifest that creates a new fungible resource.
fn main() {
    // An allocator that we will use to create new _example_ addresses for the purposes of this
    // example. Addresses generated by the allocator do not exist on any network.
    let mut allocator = Allocator::default();

    // The address of the account to pay the fees from.
    let fee_payer_account = allocator.new_account_address();

    // The address of the account to deposit the resources into.
    let destination_account = allocator.new_account_address();

    // The address of the resource we're minting.
    let non_fungible_resource = allocator.new_non_fungible_resource_address();

    // Constructing a manifest that establishes a two-way link between the resource and the dApp
    // definition.
    let manifest = ManifestBuilder::new()
        // Locking fees from the fee payer's account.
        .lock_fee(fee_payer_account, 10)
        // Minting the resources.
        .mint_non_fungible(
            non_fungible_resource,
            [
                (
                    NonFungibleLocalId::integer(1),
                    LoanInformation {
                        loaned_amount: dec!(100),
                        loaned_resource: XRD,
                        loaned_until: Instant::new(0),
                    },
                ),
                (
                    NonFungibleLocalId::integer(2),
                    LoanInformation {
                        loaned_amount: dec!(100),
                        loaned_resource: XRD,
                        loaned_until: Instant::new(0),
                    },
                ),
            ],
        )
        // Depositing the resources into some account
        .try_deposit_entire_worktop_or_abort(destination_account, None)
        .build();

    // Validate the manifest and print it.
    validate_and_print(&manifest)
}

#[derive(Clone, Debug, NonFungibleData, ScryptoSbor, ManifestSbor)]
pub struct LoanInformation {
    pub loaned_amount: Decimal,
    pub loaned_resource: ResourceAddress,
    pub loaned_until: Instant,
}
